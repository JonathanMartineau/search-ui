/// <reference path="../Base.ts" />
/// <reference path="../ui/Facet/FacetUtils.ts" />

module Coveo {

  export class FacetQueryController {
    public expressionToUseForFacetSearch: string;
    public constantExpressionToUseForFacetSearch: string;
    public lastGroupByRequestIndex: number;
    public lastGroupByRequest: IGroupByRequest;
    public lastGroupByResult: GroupByResult;

    constructor(public facet: Facet) {
    }

    /**
     * Reset the expression for the facet search, used when a new query is triggered
     */
    public prepareForNewQuery() {
      this.lastGroupByRequestIndex = undefined;
      this.expressionToUseForFacetSearch = undefined;
      this.constantExpressionToUseForFacetSearch = undefined;
    }

    /**
     * Compute the filter expression that the facet need to output for the query
     * @returns {string}
     */
    public computeOurFilterExpression(): string {
      var builder = new ExpressionBuilder();
      var selected = this.facet.values.getSelected();
      if (selected.length > 0) {
        if (this.facet.options.useAnd) {
          _.each(selected, (value: FacetValue) => {
            builder.addFieldExpression(this.facet.options.field, '==', [value.value]);
          });
        } else {
          builder.addFieldExpression(this.facet.options.field, '==', _.map(selected, (value: FacetValue) => value.value));
        }
      }
      var excluded = this.facet.values.getExcluded();
      if (excluded.length > 0) {
        builder.addFieldNotEqualExpression(this.facet.options.field, _.map(excluded, (value: FacetValue) => value.value));
      }
      if (Utils.isNonEmptyString(this.facet.options.additionalFilter)) {
        builder.add(this.facet.options.additionalFilter);
      }
      return builder.build();
    }

    /**
     * Build the group by request for the facet, and insert it in the query builder
     * @param queryBuilder
     */
    public putGroupByIntoQueryBuilder(queryBuilder: QueryBuilder) {
      Assert.exists(queryBuilder);

      var allowedValues = this.createGroupByAllowedValues();
      var groupByRequest = this.createBasicGroupByRequest(allowedValues);

      var queryOverrideObject = this.createGroupByQueryOverride(queryBuilder);
      if (!Utils.isNullOrUndefined(queryOverrideObject)) {
        groupByRequest.queryOverride = queryOverrideObject.basic;
        groupByRequest.advancedQueryOverride = queryOverrideObject.advanced;
        groupByRequest.constantQueryOverride = queryOverrideObject.constant;
        this.expressionToUseForFacetSearch = queryOverrideObject.withoutConstant;
        this.constantExpressionToUseForFacetSearch = queryOverrideObject.constant;
      } else {
        var parts = queryBuilder.computeCompleteExpressionParts();
        this.expressionToUseForFacetSearch = parts.withoutConstant;
        if (this.expressionToUseForFacetSearch == null) {
          this.expressionToUseForFacetSearch = "@uri";
        }
        this.constantExpressionToUseForFacetSearch = parts.constant;
      }
      this.lastGroupByRequestIndex = queryBuilder.groupByRequests.length;
      this.lastGroupByRequest = groupByRequest;
      queryBuilder.groupByRequests.push(groupByRequest);
    }

    /**
     * Search inside the facet, using a group by request
     * @param params
     * @param oldLength Optional params, used by the search method to call itself recursively to fetch all required values
     * @returns {Promise|Promise<T>}
     */
    public search(params: FacetSearchParameters, oldLength = params.nbResults): Promise<IIndexFieldValue[]> {

      return new Promise((resolve, reject)=> {
        var onResult = (fieldValues?: IIndexFieldValue[]) => {
          var newLength = fieldValues.length;
          fieldValues = this.checkForFacetSearchValuesToRemove(fieldValues, params.valueToSearch);
          if (FacetUtils.needAnotherFacetSearch(fieldValues.length, newLength, oldLength, 5)) {
            // This means that we removed enough values from the returned one that we need to perform a new search with more values requested.
            params.nbResults += 5;
            return this.search(params, fieldValues.length);
          } else {
            resolve(fieldValues);
          }
        }

<<<<<<< mine
        this.facet.getEndpoint().search(params.getQuery())
            .then((queryResults: IQueryResults)=> {
              if (this.facet.searchInterface.isNewDesign()) {
                // params.getQuery() will generate a query for all excluded values + some new values
                // there is no clean way to do a group by and remove some values
                // so instead we request more values than we need, and crop all the one we don't want
                var valuesCropped: IGroupByValue[] = [];
                if (queryResults.groupByResults && queryResults.groupByResults[0]) {
                  _.each(queryResults.groupByResults[0].values, (v: IGroupByValue)=> {
                    if (v.lookupValue) {
                      if (!_.contains(params.alwaysExclude, v.lookupValue.toLowerCase())) {
                        valuesCropped.push(v);
                      }
                    } else {
                      if (!_.contains(params.alwaysExclude, v.value.toLowerCase())) {
                        valuesCropped.push(v);
                      }
                    }
                  })
                }
                onResult(_.first(valuesCropped, params.nbResults));
              } else {
                return queryResults.groupByResults[0];
              }
=======
      var searchDeferred: JQueryDeferred<any>;
      if (params.facet.options.lookupField == null && params.facet.options.computedField == null) {
        searchDeferred = params.facet.queryController
                               .getEndpoint()
                               .listFieldValues(this.buildListFieldValuesRequest(params));

        searchDeferred.done(onResult);
      } else {
        searchDeferred = params.facet.facetQueryController.searchWithLookupField(params);
        searchDeferred.done((queryResults: QueryResults) => {
          var fieldValues = queryResults.groupByResults.length > 0 ? queryResults.groupByResults[0].values : [];
          onResult(fieldValues);
        });
      }

      searchDeferred.fail((data, error?: EndpointError) => {
        returnDeferred.reject(data, error);
      });

      returnDeferred.fail(() => {
        searchDeferred.reject();
      });
      return returnDeferred;
    }

    public searchWithLookupField(params: FacetSearchParameters) {
      var query = this.buildGroupByQuery();
      var groupBy = query.groupBy[0];
      groupBy.maximumNumberOfValues = params.nbResults;
      // In new design : to support infinite scrolling we request the excluded values also, so that
      // we can get enough value in the group by
      if (this.facet.searchInterface.isNewDesign()) {
        groupBy.maximumNumberOfValues += params.alwaysExclude.length;
      }
      if (this.facet.options.lookupField == null) {
        groupBy.allowedValues = _.map(params.alwaysInclude, (value) => '*' + value + '*');
      } else {
        groupBy.completeFacetWithStandardValues = false;
      }
      var searchQuery = this.buildSearchQueryForFacetWithLookupField(params.alwaysInclude);
      if (query.aq == null) {
        query.aq = searchQuery;
      } else {
        query.aq += ' ' + searchQuery;
      }
      var deferred = this.createSearchDeferer(query);
      // In new design : Need to crop duplicated values for infinite scrolling here
      if (this.facet.searchInterface.isNewDesign()) {
        deferred.done((results: QueryResults)=> {
          if (results.groupByResults && results.groupByResults[0]) {
            var valuesCropped: GroupByValue[] = [];
            var excludedToLowerCase = _.map(params.alwaysExclude, (excl: string)=> {
              return excl.toLowerCase();
>>>>>>> theirs
            })
            .catch((error: EndpointError)=> {
              reject(error);
            })
      })
    }

    public fetchMore(numberOfValuesToFetch: number) {
      var params = new FacetSearchParameters(this.facet);
      params.alwaysInclude = this.facet.options.allowedValues || _.pluck(this.facet.values.getAll(), 'value');
      params.nbResults = numberOfValuesToFetch;
      return this.facet.getEndpoint().search(params.getQuery());
    }

    public searchInFacetToUpdateDelta(facetValues: FacetValue[]) {
      var params = new FacetSearchParameters(this.facet);
      var query = params.getQuery();
      query.aq = this.computeOurFilterExpression();
      _.each(facetValues, (facetValue: FacetValue) => {
        facetValue.waitingForDelta = true;
      });
      query.groupBy = [this.createBasicGroupByRequest(_.map(facetValues, (facetValue: FacetValue) => facetValue.value))];
      query.groupBy[0].completeFacetWithStandardValues = false;
      return this.facet.getEndpoint().search(query);
    }

    protected createGroupByAllowedValues() {
      // if you want to keep displayed values next time, take all current values as allowed values
      // otherwise take only the selected value
      var allowedFacetValues: FacetValue[];
      if (this.facet.options.allowedValues != undefined) {
        return this.facet.options.allowedValues;
      } else if (this.facet.options.customSort != undefined) {
        // If there is a custom sort, we still need to add selectedValues to the group by
        // Filter out duplicates with a lower case comparison on the value
        var toCompare = _.map(this.facet.options.customSort, (val: string)=> {
          return val.toLowerCase();
        })
        var filtered = _.filter(this.getAllowedValuesFromSelected(), (value: string)=> {
          return !_.contains(toCompare, value.toLowerCase());
        })
        return this.facet.options.customSort.concat(filtered);

      } else {
        return this.getAllowedValuesFromSelected();
      }
    }

    private getAllowedValuesFromSelected() {
      var toMap: FacetValue[] = [];
      if (this.facet.options.useAnd || !this.facet.keepDisplayedValuesNextTime) {
        var selected = this.facet.values.getSelected();
        if (selected.length == 0) {
          return undefined;
        }
        toMap = this.facet.values.getSelected();
      } else {
        toMap = this.facet.values.getAll();
      }
      return _.map(toMap, (facetValue: FacetValue)=> facetValue.value);
    }

<<<<<<< mine
    private createGroupByQueryOverride(queryBuilder: QueryBuilder): IQueryBuilderExpression {
      var additionalFilter = this.facet.options.additionalFilter ? this.facet.options.additionalFilter : undefined;
=======
    private createGroupByQueryOverride(queryBuilder: QueryBuilder): QueryBuilderExpression {
      var additionalFilter = this.facet.options.additionalFilter ? this.facet.options.additionalFilter : '';
      var queryOverrideObject: QueryBuilderExpression = undefined;
>>>>>>> theirs

      if (this.facet.options.useAnd) {
        if (Utils.isNonEmptyString(additionalFilter)) {
          queryOverrideObject = queryBuilder.computeCompleteExpressionParts();
          if (Utils.isEmptyString(queryOverrideObject.basic)) {
            queryOverrideObject.basic = '@uri';
          }
        }
      } else {
        if (this.facet.values.hasSelectedOrExcludedValues()) {
          queryOverrideObject = queryBuilder.computeCompleteExpressionPartsExcept(this.computeOurFilterExpression());
          if (Utils.isEmptyString(queryOverrideObject.basic)) {
            queryOverrideObject.basic = '@uri';
          }
        } else {
          if (Utils.isNonEmptyString(additionalFilter)) {
            queryOverrideObject = queryBuilder.computeCompleteExpressionParts();
            if (Utils.isEmptyString(queryOverrideObject.basic)) {
              queryOverrideObject.basic = '@uri';
            }
          }
        }
      }

      if (queryOverrideObject) {
        if (Utils.isNonEmptyString(additionalFilter)) {
          queryOverrideObject.constant = queryOverrideObject.constant ? queryOverrideObject.constant + ' ' + additionalFilter : additionalFilter;
        }
<<<<<<< mine
      } else {

        // If the facet has a selection, there will be a query override built
        // by excluding the current facet selection
        var queryOverrideObject = <IQueryBuilderExpression>_.defaults(queryBuilder.computeCompleteExpressionPartsExcept(this.computeOurFilterExpression()), {withoutConstant: '@uri', basic: '@uri', advanced: '@uri'});
        if (queryOverrideObject.constant == undefined) {
          //Additional filter is possible undefined : Here it does not matter as it is already undefined.
          queryOverrideObject.constant = additionalFilter;
        } else {
          queryOverrideObject.constant += (additionalFilter ? ' ' + additionalFilter : '');
=======
      }
      _.each(_.keys(queryOverrideObject), (k)=> {
        if (Utils.isEmptyString(queryOverrideObject[k]) || Utils.isNullOrUndefined(queryOverrideObject[k])) {
          delete queryOverrideObject[k];
>>>>>>> theirs
        }
      })
      if (_.keys(queryOverrideObject).length == 0) {
        queryOverrideObject = undefined;
      }
      return queryOverrideObject;
    }

    protected createBasicGroupByRequest(allowedValues ?: string[], addComputedField: boolean = true): IGroupByRequest {
      var nbOfRequestedValues = this.facet.numberOfValues;
      if (this.facet.options.customSort != null) {
        var usedValues = _.union(_.map(this.facet.values.getSelected(), (facetValue: FacetValue) => facetValue.value), _.map(this.facet.values.getExcluded(), (facetValue: FacetValue) => facetValue.value), this.facet.options.customSort);
        nbOfRequestedValues = Math.max(nbOfRequestedValues, usedValues.length);
      }

      var groupByRequest: IGroupByRequest = {
        field: this.facet.options.field,
        maximumNumberOfValues: nbOfRequestedValues + (this.facet.options.enableMoreLess ? 1 : 0),
        sortCriteria: this.facet.options.sortCriteria,
        injectionDepth: this.facet.options.injectionDepth,
        completeFacetWithStandardValues: this.facet.options.allowedValues == undefined ? true : false
      };
      if (this.facet.options.lookupField) {
        groupByRequest.lookupField = this.facet.options.lookupField;
      }
      if (allowedValues != null) {
        groupByRequest.allowedValues = allowedValues;
      }

      if (addComputedField && Utils.isNonEmptyString(this.facet.options.computedField)) {
        groupByRequest.computedFields = [{
          field: this.facet.options.computedField,
          operation: this.facet.options.computedFieldOperation
        }];
      }
      return groupByRequest;
    }

    private checkForFacetSearchValuesToRemove(fieldValues: IIndexFieldValue[], valueToCheckAgainst: string) {
      var regex = FacetUtils.getRegexToUseForFacetSearch(valueToCheckAgainst, this.facet.options.facetSearchIgnoreAccents);

      return _.filter<IIndexFieldValue>(fieldValues, (fieldValue) => {
        var isAllowed =
            _.isEmpty(this.facet.options.allowedValues) ||
            _.contains(this.facet.options.allowedValues, fieldValue.value);

        var value = this.facet.getValueCaption(fieldValue);
        return isAllowed && regex.test(value);
      })
    }
  }
}
